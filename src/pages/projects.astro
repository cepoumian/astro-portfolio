---
// Enable server side rendering
export const prerender = false;

// layout
import BaseLayout from "@/layouts/BaseLayout.astro";

// astro tools
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

// components
import Hero from "@/components/projects/Hero.astro";
import ContactForm from "@/components/ContactForm.astro";
import ProjectTile from "@/components/ui/ProjectTile.astro";
import getSearchParamAsArray from "@/lib/getSearchParamAsArray";

// collections
const allTools = await getCollection("tools");
let projects = await getCollection("projects");

const filteredItems = getSearchParamAsArray(Astro.url, "tools");

if (filteredItems.length > 0) {
  projects = projects.filter((project) => {
    const projectTools = project.data.icons.map((t) => t.id);
    return filteredItems.some((item) => projectTools.includes(item));
  });
}
---

<BaseLayout
  title="Katie Haus Projects"
  description="Here are some recent projects Iâ€™ve done for clients."
>
  <div>
    <Hero />
    <div class="container">
      <div class="filter-wrapper">
        <div class="columns">
          <p>Filter by tools</p>
          <!-- check if there are filters -->
          {
            filteredItems.length > 0 && (
              <button
                id="close-all"
                data-tool="t.id"
                class="btn badge relative"
                aria-pressed="true"
              >
                <Icon
                  name="icon--close"
                  aria-hidden="true"
                  size={18}
                  class="close"
                />
                <span>Clear All</span>
              </button>
            )
          }
        </div>
        <ul>
          {
            allTools.map((t) => (
              <li>
                <button
                  class="btn badge relative"
                  data-tool={t.id}
                  aria-pressed={filteredItems.includes(t.id)}
                >
                  <span>{t.data.title}</span>
                  {filteredItems.includes(t.id) && (
                    <Icon
                      name="icon--close"
                      aria-hidden="true"
                      size={18}
                      class="close"
                    />
                  )}
                </button>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="grid-wrapper">
        {projects.map(({ data }) => <ProjectTile data={data} />)}
      </div>
    </div>
  </div>
  <ContactForm />
</BaseLayout>

<script>
  import getSearchParamAsArray from "@/lib/getSearchParamAsArray";
	import setNewUrlParams from "@/lib/setNewUrlParams";

  const filters = document.querySelectorAll(
    "[data-tool]"
  ) as NodeListOf<HTMLButtonElement>;
  const clearAllBtn = document.querySelector("#close-all") as HTMLButtonElement;

  // Clear all
  clearAllBtn?.addEventListener("click", () => {
    window.location.href = "projects";
  });

  // Filter by tool
  filters.forEach((filter) => {
    filter.addEventListener("click", () => {
      const isPressed = filter.getAttribute("aria-pressed") === "true";

      filter.setAttribute("aria-pressed", isPressed ? "false" : "true");

      // get all params
      const existingParams = getSearchParamAsArray(
        new URL(window.location.href),
        "tools"
      );
			const newParams = isPressed
				? existingParams.filter((param) => param !== filter.dataset.tool)
				: [...existingParams, filter.dataset.tool];

			const newUrl = setNewUrlParams({
				key: "tools",
				url: new URL(window.location.href),
				valueArray: newParams as string[],
			});
			window.location.assign(newUrl.toString());
    });
  });
</script>
